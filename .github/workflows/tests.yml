name: Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_run:
    workflows: ["Vercel Production Deployment"]
    types:
      - completed

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Run Tests
        run: bun run test

      - name: Wait for Vercel Deployment
        if: github.event_name == 'pull_request'
        run: |
          echo "Waiting for Vercel deployment to complete..."
          sleep 30  # Initial wait for deployment to start

          # Try to get the preview URL multiple times
          MAX_ATTEMPTS=20
          ATTEMPT=0
          PREVIEW_URL=""
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Attempt $((ATTEMPT + 1)) of $MAX_ATTEMPTS"
            
            # Try to fetch deployment status for this specific commit
            COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              "https://api.vercel.com/v6/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID }}&gitCommitSha=${COMMIT_SHA}&limit=1")
            
            # Debug: show the response
            echo "API Response preview: $(echo "$RESPONSE" | head -c 200)..."
            
            # Check if we got a valid response with deployments
            if echo "$RESPONSE" | grep -q '"deployments"'; then
              # Extract the URL from the first deployment
              URL=$(echo "$RESPONSE" | grep -o '"url":"[^"]*' | head -1 | cut -d'"' -f4)
              STATE=$(echo "$RESPONSE" | grep -o '"state":"[^"]*' | head -1 | cut -d'"' -f4)
              
              echo "Deployment state: $STATE"
              echo "Deployment URL: $URL"
              
              if [ "$STATE" = "READY" ] && [ ! -z "$URL" ]; then
                PREVIEW_URL="https://$URL"
                echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV
                echo "Deployment ready at: $PREVIEW_URL"
                break
              fi
            else
              echo "No deployments found in response"
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "Waiting 30 seconds before next attempt..."
              sleep 30
            fi
          done

          if [ -z "$PREVIEW_URL" ]; then
            echo "Warning: Could not get preview URL after $MAX_ATTEMPTS attempts"
            echo "PREVIEW_URL=https://curl-runner.com" >> $GITHUB_ENV
          fi

      - name: Test CLI Examples with Preview URL (PR)
        if: github.event_name == 'pull_request'
        run: |
          # Build the CLI first
          bun run build:cli

          # Change to CLI directory
          cd packages/cli

          # Use the preview URL from environment
          echo "Testing against: ${PREVIEW_URL}"

          # Create temporary copies of examples with preview URLs
          mkdir -p examples-ci
          for file in examples/*.yaml; do
            # Replace both the URL and the host validation, and add Vercel bypass header
            PREVIEW_HOST=$(echo "${PREVIEW_URL}" | sed 's|https://||')
            sed -e "s|http://localhost:3000|${PREVIEW_URL}|g" \
                -e "s|localhost:3000|${PREVIEW_HOST}|g" \
                "$file" > "examples-ci/$(basename $file)"
            
            # Add Vercel automation bypass header to each request
            if grep -q "headers:" "examples-ci/$(basename $file)"; then
              # If headers section exists, add the bypass header
              sed -i '/headers:/a\    x-vercel-protection-bypass: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}' "examples-ci/$(basename $file)"
            else
              # If no headers section exists, add one with the bypass header
              sed -i '/method: /a\  headers:' "examples-ci/$(basename $file)"
              sed -i '/headers:/a\    x-vercel-protection-bypass: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}' "examples-ci/$(basename $file)"
            fi
          done

          # Run all example YAML files with preview endpoints
          ./curl-runner examples-ci/

          # Clean up
          rm -rf examples-ci

      - name: Test CLI Examples with Production URL (Main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Build the CLI first
          bun run build:cli

          # Change to CLI directory
          cd packages/cli

          echo "Testing against production: https://curl-runner.com"

          # Create temporary copies of examples with production URLs
          mkdir -p examples-ci
          for file in examples/*.yaml; do
            # Replace both the URL and the host validation, and add Vercel bypass header
            sed -e "s|http://localhost:3000|https://curl-runner.com|g" \
                -e "s|localhost:3000|curl-runner.com|g" \
                "$file" > "examples-ci/$(basename $file)"
            
            # Add Vercel automation bypass header to each request
            if grep -q "headers:" "examples-ci/$(basename $file)"; then
              # If headers section exists, add the bypass header
              sed -i '/headers:/a\    x-vercel-protection-bypass: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}' "examples-ci/$(basename $file)"
            else
              # If no headers section exists, add one with the bypass header
              sed -i '/method: /a\  headers:' "examples-ci/$(basename $file)"
              sed -i '/headers:/a\    x-vercel-protection-bypass: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}' "examples-ci/$(basename $file)"
            fi
          done

          # Run all example YAML files with production endpoints
          ./curl-runner examples-ci/

          # Clean up
          rm -rf examples-ci
