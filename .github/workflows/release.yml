name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: Production
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Lint and Check
        run: bun run check:ci

      - name: Run Tests
        run: bun run test

      - name: Build CLI (repo build)
        run: bun run build:cli

      # ---------- npm auth for publish ----------
      - name: Configure npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "@curl-runner:registry=https://registry.npmjs.org/" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm auth (optional)
        run: |
          npm config get registry
          npm whoami
          npm ping
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # ---------- Changesets: version + publish (+ GitHub Release via config) ----------
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          version: bun run version
          publish: bun run release
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Everything below runs ONLY when a real release was published
      # (Changesets sets outputs.published == 'true' in that case)

      - name: Compute release tag + build metadata for CLI
        id: meta
        if: steps.changesets.outputs.published == 'true'
        run: |
          VERSION=$(jq -r .version packages/cli/package.json)
          TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "TAG=@curl-runner/cli@${VERSION}" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "TIME=$TIME" >> "$GITHUB_OUTPUT"

      - name: Build cross-platform Bun binaries
        if: steps.changesets.outputs.published == 'true'
        run: |
          bun build src/cli.ts --compile --minify --sourcemap --bytecode \
            --define BUILD_VERSION='"${{ steps.meta.outputs.VERSION }}"' \
            --define BUILD_TIME='"${{ steps.meta.outputs.TIME }}"' \
            --target=bun-linux-x64    --outfile curl-runner-linux-x64
          bun build src/cli.ts --compile --minify --sourcemap --bytecode \
            --define BUILD_VERSION='"${{ steps.meta.outputs.VERSION }}"' \
            --define BUILD_TIME='"${{ steps.meta.outputs.TIME }}"' \
            --target=bun-linux-arm64  --outfile curl-runner-linux-arm64
          bun build src/cli.ts --compile --minify --sourcemap --bytecode \
            --define BUILD_VERSION='"${{ steps.meta.outputs.VERSION }}"' \
            --define BUILD_TIME='"${{ steps.meta.outputs.TIME }}"' \
            --target=bun-darwin-x64   --outfile curl-runner-darwin-x64
          bun build src/cli.ts --compile --minify --sourcemap --bytecode \
            --define BUILD_VERSION='"${{ steps.meta.outputs.VERSION }}"' \
            --define BUILD_TIME='"${{ steps.meta.outputs.TIME }}"' \
            --target=bun-darwin-arm64 --outfile curl-runner-darwin-arm64
          bun build src/cli.ts --compile --minify --sourcemap --bytecode \
            --define BUILD_VERSION='"${{ steps.meta.outputs.VERSION }}"' \
            --define BUILD_TIME='"${{ steps.meta.outputs.TIME }}"' \
            --target=bun-windows-x64  --outfile curl-runner-windows-x64.exe
        working-directory: packages/cli

      - name: Package binaries
        if: steps.changesets.outputs.published == 'true'
        run: |
          cd packages/cli
          tar -czf curl-runner-linux-x64-${{ steps.meta.outputs.TAG }}.tar.gz    curl-runner-linux-x64
          tar -czf curl-runner-linux-arm64-${{ steps.meta.outputs.TAG }}.tar.gz  curl-runner-linux-arm64
          tar -czf curl-runner-darwin-x64-${{ steps.meta.outputs.TAG }}.tar.gz   curl-runner-darwin-x64
          tar -czf curl-runner-darwin-arm64-${{ steps.meta.outputs.TAG }}.tar.gz curl-runner-darwin-arm64
          zip        curl-runner-windows-x64-${{ steps.meta.outputs.TAG }}.zip   curl-runner-windows-x64.exe

      - name: Generate checksums
        if: steps.changesets.outputs.published == 'true'
        run: |
          cd packages/cli
          shasum -a 256 \
            curl-runner-linux-x64-${{ steps.meta.outputs.TAG }}.tar.gz \
            curl-runner-linux-arm64-${{ steps.meta.outputs.TAG }}.tar.gz \
            curl-runner-darwin-x64-${{ steps.meta.outputs.TAG }}.tar.gz \
            curl-runner-darwin-arm64-${{ steps.meta.outputs.TAG }}.tar.gz \
            curl-runner-windows-x64-${{ steps.meta.outputs.TAG }}.zip \
            > SHA256SUMS.txt

      - name: Upload binaries + checksums to GitHub Release
        if: steps.changesets.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.meta.outputs.TAG }}
          files: |
            packages/cli/curl-runner-linux-x64-${{ steps.meta.outputs.TAG }}.tar.gz
            packages/cli/curl-runner-linux-arm64-${{ steps.meta.outputs.TAG }}.tar.gz
            packages/cli/curl-runner-darwin-x64-${{ steps.meta.outputs.TAG }}.tar.gz
            packages/cli/curl-runner-darwin-arm64-${{ steps.meta.outputs.TAG }}.tar.gz
            packages/cli/curl-runner-windows-x64-${{ steps.meta.outputs.TAG }}.zip
            packages/cli/SHA256SUMS.txt
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
